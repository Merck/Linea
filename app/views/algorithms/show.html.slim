/CopyrightÂ© 2017 Merck Sharp & Dohme Corp. a subsidiary of Merck & Co., Inc., Kenilworth, NJ, USA.  Licensed under the Apache License, Version 2.0 (the "License");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at       http://www.apache.org/licenses/LICENSE-2.0     Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an "AS IS" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License. 
.row.content-container
  .col-md-12.dataset-detail-container
    .row.header
      .col-md-12
        .row
          .col-md-10.details-title
            i.icon.icon-dataset-icon-1
            = @algorithm.name
          .col-md-2.pull-right
            button#back-button.btn.btn-primary.pull-right[type="button" onclick="window.history.back();"]
              | BACK
        .row.sub-header.subheader-item
          .col-md-12
            .title
              a href=@algorithm.path target="_new"
                = @algorithm.path
        .row.line-break
          .col-md-12
            .horizontal-line
    .row
      .col-md-12
        pre
          | int binary_search(int A[], int key, int imin, int imax) { // test if array is empty if (imax < imin) // set is empty, so return value showing not found return KEY_NOT_FOUND; else { // calculate midpoint to cut set in half int imid = midpoint(imin, imax); // three-way comparison if (A[imid] > key) // key is in lower subset return binary_search(A, key, imin, imid-1); else if (A[imid] < key) // key is in upper subset return binary_search(A, key, imid+1, imax); else // key has been found return imid; } }
javascript:
  $(document).ready(function(){ if( window.history.length === 1 ) { $("#back-button").attr("disabled","disabled"); } });
